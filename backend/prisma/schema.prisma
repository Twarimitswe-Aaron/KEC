generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  teacher
  student
}

model User {
  id                Int       @id @default(autoincrement())
  firstName         String    @default("")
  lastName          String    @default("")
  isEmailVerified   Boolean   @default(false)
  verificationToken String?
  tokenExpiresAt    DateTime?
  email             String    @unique
  password          String
  role              Role
  refresh_token     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  profile Profile?

  admin        Admin?
  teacher      Teacher?
  student      Student?
  course       Course[]
  announcement Announcement[]
  responses    Response[] // ✅ User responses to forms/quizzes
}

model Admin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id     Int   @id @default(autoincrement())
  userId Int   @unique
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  certificates     Certificates[]
  onGoingCourses   Course[]       @relation("OnGoingCourses")
  completedCourses Course[]       @relation("CompletedCourses")
  failedCourses    Course[]       @relation("FailedCourses")

  feedback Feedback[]
}

model Course {
  id         Int   @id @default(autoincrement())
  uploaderId Int?
  uploader   User? @relation(fields: [uploaderId], references: [id], onDelete: Cascade)

  title       String
  description String
  coursePrice String
  image_url   String
  isConfirmed Boolean @default(false)

  no_lesson Int      @default(0)
  maximum   Int?
  open      Boolean?
  totalPaid String?

  // relations
  lesson     Lesson[]
  assignment Assignment[]
  modules    Module[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  onGoingStudents   Student[] @relation("OnGoingCourses")
  completedStudents Student[] @relation("CompletedCourses")
  failedStudents    Student[] @relation("FailedCourses")
}

model Assignment {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  courseId    Int
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Lesson {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  isUnlocked  Boolean  @default(false)
  createdAt   DateTime @default(now())

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  resources Resource[]
}

model Module {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  isUnlocked  Boolean    @default(false)
  order       Int
  createdAt   DateTime   @default(now())
  resources   Resource[]
  courseId    Int?
  course      Course?    @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Resource {
  id       Int     @id @default(autoincrement())
  moduleId Int?
  module   Module? @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  lessonId Int?
  lesson   Lesson? @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  name       String
  type       ResourceType
  size       String?
  uploadedAt DateTime     @default(now())
  duration   String?
  url        String?

  quizId Int?  @unique
  quiz   Quiz? @relation(fields: [quizId], references: [id])
}

model Quiz {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  settings    String? // JSON stringified quiz settings
  questions   QuizQuestion[]
  resource    Resource?
  attempts    QuizAttempt[]
  formId      Int? // ✅ Each Quiz may include a dynamic Form
  form        Form?          @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model QuizQuestion {
  id             Int     @id @default(autoincrement())
  quizId         Int
  type           String // "multiple" | "checkbox" | "truefalse" | "short"
  question       String
  options        String? // JSON stringified array
  correctAnswer  Int? // For single-answer questions (index or value)
  correctAnswers String? // JSON stringified array for multi-answer questions
  required       Boolean @default(false)
  orderIndex     Int     @default(0) // For ordering questions
  order          Int     @default(0) // Alternative ordering field
  points         Int     @default(1) // Points for this question
  quiz           Quiz    @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id              Int      @id @default(autoincrement())
  quizId          Int
  submittedAt     DateTime @default(now())
  responses       String   // JSON stringified responses
  score           Int      @default(0) // Calculated score
  totalPoints     Int      @default(0) // Total possible points
  detailedResults String? // JSON stringified detailed results
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}


model Form {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  questions   Question[]
  createdAt   DateTime   @default(now())
  responses   Response[]
  quizzes     Quiz[]
}

model Question {
  id           Int          @id @default(autoincrement())
  formId       Int
  form         Form         @relation(fields: [formId], references: [id])
  questionText String
  type         QuestionType
  options      Option[]
  responses    Response[]
  required     Boolean      @default(false)
}

model Option {
  id         Int      @id @default(autoincrement())
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  text       String
}

model Response {
  id         Int      @id @default(autoincrement())
  userId     Int
  formId     Int
  questionId Int
  user       User     @relation(fields: [userId], references: [id])
  form       Form     @relation(fields: [formId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  answer     String
  createdAt  DateTime @default(now())
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  CHECKBOX
  DATE
  NUMBER
}

enum ResourceType {
  pdf
  video
  quiz
  word
}

model Announcement {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posterId Int
  poster   User @relation(fields: [posterId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        Int      @id @default(autoincrement())
  feedback  String
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          Int       @id @default(autoincrement())
  avatar      String?
  work        String?
  education   String?
  resident    String?
  phone       String?
  dateOfBirth DateTime?
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Category {
  Food
  Transport
  Entertainment
  Utilities
  Other
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      String
  category    Category
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Workshop {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificates {
  id        Int      @id @default(autoincrement())
  course    String
  approved  Boolean
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  expiresAt DateTime
}
