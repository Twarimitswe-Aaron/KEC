generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  teacher
  student
}

model User {
  id                Int       @id @default(autoincrement())
  firstName         String    @default("")
  lastName          String    @default("")
  isEmailVerified   Boolean   @default(false)
  verificationToken String?
  tokenExpiresAt    DateTime?
  email             String    @unique
  password          String
  role              Role
  refresh_token     String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  profile Profile?

  admin        Admin?
  teacher      Teacher?
  student      Student?
  announcement Announcement[]
}

model Admin {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Teacher {
  id      Int      @id @default(autoincrement())
  userId  Int      @unique
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses Course[]
}

model Student {
  id     Int   @id @default(autoincrement())
  userId Int   @unique
  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  certificates     Certificates[]
  onGoingCourses   Course[]       @relation("OnGoingCourses")
  completedCourses Course[]       @relation("CompletedCourses")
  failedCourses    Course[]       @relation("FailedCourses")

  feedback Feedback[]
}

model Course {
  id        Int     @id @default(autoincrement())
  teacherId Int
  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  title       String
  description String
  coursePrice String
  image_url   String

  lesson     Lesson[]
  assignment Assignment[]
  maximum    Int
  open       Boolean
  totalPaid    String
  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  onGoingStudents   Student[] @relation("OnGoingCourses")
  completedStudents Student[] @relation("CompletedCourses")
  failedStudents    Student[] @relation("FailedCourses")
}

model Assignment {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  courseId    Int
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Lesson {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  status      Boolean @default(false)

  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  resources Resource[]
}

model Resource {
  id    Int    @id @default(autoincrement())
  word  String
  pdf   String
  video String

  lessonId Int
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  quiz Quiz[]
}

model Quiz {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  quiz        String?

  resourceId Int
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posterId Int
  poster   User @relation(fields: [posterId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        Int      @id @default(autoincrement())
  feedback  String
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id          Int       @id @default(autoincrement())
  avatar      String?
  work        String?
  education   String?
  resident    String?
  phone       String?
  dateOfBirth DateTime?
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Category {
  Food
  Transport
  Entertainment
  Utilities
  Other
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      String
  category    Category
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Workshop {
  id        Int      @id @default(autoincrement())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Certificates {
  id        Int      @id @default(autoincrement())
  course    String
  approved  Boolean
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ResetToken {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  expiresAt DateTime
}
